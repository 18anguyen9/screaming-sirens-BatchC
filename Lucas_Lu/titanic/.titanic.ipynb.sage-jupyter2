{"backend_state":"running","connection_file":"/projects/4559949a-12be-48f9-8c58-b62a9ca1e674/.local/share/jupyter/runtime/kernel-4d11c8f2-f0ba-4a97-a196-f3300aeccde1.json","kernel":"cv_env","kernel_error":"","kernel_state":"idle","metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.13"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1658522573285,"exec_count":44,"id":"cd8976","input":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nfrom sklearn.linear_model import LogisticRegression","kernel":"cv_env","pos":0,"start":1658522573278,"state":"done","type":"cell"}
{"cell_type":"code","end":1658522575174,"exec_count":45,"id":"7ccf1f","input":"#read in data with pd.read_csv('filename/path')\ntrain = pd.read_csv('train.csv')\ntest = pd.read_csv('test.csv')","kernel":"cv_env","pos":1,"start":1658522575162,"state":"done","type":"cell"}
{"cell_type":"code","end":1658522577614,"exec_count":46,"id":"35efcd","input":"cleaned_train = train[['Pclass','Sex','Age']].copy()\ncleaned_train.head(2)","kernel":"cv_env","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>3</td>\n      <td>male</td>\n      <td>22.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>female</td>\n      <td>38.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"   Pclass     Sex   Age\n0       3    male  22.0\n1       1  female  38.0"},"exec_count":46}},"pos":2,"start":1658522577609,"state":"done","type":"cell"}
{"cell_type":"code","end":1658522580020,"exec_count":47,"id":"08759c","input":"def test_gender(gender):\n    if gender=='male':\n        return 1\n    else:\n        return 0","kernel":"cv_env","pos":3,"start":1658522580015,"state":"done","type":"cell"}
{"cell_type":"code","end":1658522744290,"exec_count":48,"id":"3e9f65","input":"mean_age = train['Age'].mean()","kernel":"cv_env","pos":4,"start":1658522744284,"state":"done","type":"cell"}
{"cell_type":"code","end":1658522747140,"exec_count":49,"id":"ce76a9","input":"new_age_col = cleaned_train['Age'].fillna(mean_age)\ncleaned_train['Age']  = new_age_col","kernel":"cv_env","pos":5,"start":1658522747131,"state":"done","type":"cell"}
{"cell_type":"code","end":1658522748304,"exec_count":50,"id":"55c77b","input":"cleaned_train['Sex']=cleaned_train['Sex'].replace(['male'],0)\ncleaned_train['Sex']=cleaned_train['Sex'].replace(['female'],1)","kernel":"cv_env","pos":6,"start":1658522748294,"state":"done","type":"cell"}
{"cell_type":"code","end":1658522748876,"exec_count":51,"id":"1a4e58","input":"X_matrix = cleaned_train.values\ny = train['Survived']","kernel":"cv_env","pos":7,"start":1658522748869,"state":"done","type":"cell"}
{"cell_type":"code","end":1658522750066,"exec_count":52,"id":"f8e81f","input":"mod = LogisticRegression()\nmod.fit(X_matrix,y)","kernel":"cv_env","output":{"0":{"data":{"text/html":"<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression()</pre></div></div></div></div></div>","text/plain":"LogisticRegression()"},"exec_count":52}},"pos":9,"start":1658522750046,"state":"done","type":"cell"}
{"cell_type":"code","end":1658522750588,"exec_count":53,"id":"71c3bd","input":"clean_test = test[['Pclass','Sex','Age']].copy()\nclean_test['Age'] = clean_test['Age'].fillna(mean_age)\n","kernel":"cv_env","pos":10,"start":1658522750584,"state":"done","type":"cell"}
{"cell_type":"code","end":1658522750837,"exec_count":54,"id":"6d9384","input":"clean_test['Sex'] =(clean_test['Sex']=='female').astype(int)","kernel":"cv_env","pos":11,"start":1658522750832,"state":"done","type":"cell"}
{"cell_type":"code","end":1658522751039,"exec_count":55,"id":"3f4fb0","input":"x_test = clean_test.values\nclean_test","kernel":"cv_env","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>3</td>\n      <td>0</td>\n      <td>34.500000</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3</td>\n      <td>1</td>\n      <td>47.000000</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>0</td>\n      <td>62.000000</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>0</td>\n      <td>27.000000</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>3</td>\n      <td>1</td>\n      <td>22.000000</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>413</th>\n      <td>3</td>\n      <td>0</td>\n      <td>29.699118</td>\n    </tr>\n    <tr>\n      <th>414</th>\n      <td>1</td>\n      <td>1</td>\n      <td>39.000000</td>\n    </tr>\n    <tr>\n      <th>415</th>\n      <td>3</td>\n      <td>0</td>\n      <td>38.500000</td>\n    </tr>\n    <tr>\n      <th>416</th>\n      <td>3</td>\n      <td>0</td>\n      <td>29.699118</td>\n    </tr>\n    <tr>\n      <th>417</th>\n      <td>3</td>\n      <td>0</td>\n      <td>29.699118</td>\n    </tr>\n  </tbody>\n</table>\n<p>418 rows × 3 columns</p>\n</div>","text/plain":"     Pclass  Sex        Age\n0         3    0  34.500000\n1         3    1  47.000000\n2         2    0  62.000000\n3         3    0  27.000000\n4         3    1  22.000000\n..      ...  ...        ...\n413       3    0  29.699118\n414       1    1  39.000000\n415       3    0  38.500000\n416       3    0  29.699118\n417       3    0  29.699118\n\n[418 rows x 3 columns]"},"exec_count":55}},"pos":12,"start":1658522751030,"state":"done","type":"cell"}
{"cell_type":"code","end":1658522751431,"exec_count":56,"id":"200004","input":"pred = (mod.predict(x_test))","kernel":"cv_env","pos":14,"start":1658522751429,"state":"done","type":"cell"}
{"cell_type":"code","end":1658522751595,"exec_count":57,"id":"c6808d","input":"test['Survived'] = pred","kernel":"cv_env","pos":15,"start":1658522751589,"state":"done","type":"cell"}
{"cell_type":"code","end":1658522751801,"exec_count":58,"id":"9f4ae3","input":"final_submission = test[['PassengerId','Survived']].copy()","kernel":"cv_env","pos":16,"start":1658522751796,"state":"done","type":"cell"}
{"cell_type":"code","end":1658522752114,"exec_count":59,"id":"5f9c27","input":"final_submission.reset_index(drop=True).to_csv('titanic_test.csv',index=False)","kernel":"cv_env","pos":17,"start":1658522752112,"state":"done","type":"cell"}
{"cell_type":"code","end":1658522752632,"exec_count":60,"id":"02f25d","input":"# NaN =. Not A Number, null value\ntrain.isnull().sum()","kernel":"cv_env","output":{"0":{"data":{"text/plain":"PassengerId      0\nSurvived         0\nPclass           0\nName             0\nSex              0\nAge            177\nSibSp            0\nParch            0\nTicket           0\nFare             0\nCabin          687\nEmbarked         2\ndtype: int64"},"exec_count":60}},"pos":20,"start":1658522752618,"state":"done","type":"cell"}
{"cell_type":"code","end":1658522752788,"exec_count":61,"id":"926a83","input":"# grab a column with the format df['columnName']\naverageFare = train[\"Fare\"].mean()\naverageFare","kernel":"cv_env","output":{"0":{"data":{"text/plain":"32.2042079685746"},"exec_count":61}},"pos":21,"start":1658522752782,"state":"done","type":"cell"}
{"cell_type":"code","id":"23de3c","input":"","pos":24,"type":"cell"}
{"cell_type":"code","id":"629ca8","input":"","pos":27,"type":"cell"}
{"cell_type":"code","id":"968493","input":"","pos":23,"type":"cell"}
{"cell_type":"code","id":"a8e94f","input":"","pos":19,"type":"cell"}
{"cell_type":"code","id":"adb67b","input":"","pos":18,"type":"cell"}
{"cell_type":"code","id":"b05b63","input":"","pos":8,"type":"cell"}
{"cell_type":"code","id":"b29c11","input":"","pos":28,"type":"cell"}
{"cell_type":"code","id":"bb673a","input":"","pos":22,"type":"cell"}
{"cell_type":"code","id":"bf20a0","input":"","pos":26,"type":"cell"}
{"cell_type":"code","id":"cf536f","input":"","pos":29,"type":"cell"}
{"cell_type":"code","id":"e25687","input":"","pos":13,"type":"cell"}
{"cell_type":"code","id":"ed259e","input":"","pos":25,"type":"cell"}
{"id":"158c37","input":"","pos":34,"type":"cell"}
{"id":"7f0daf","input":"","pos":32,"type":"cell"}
{"id":"c2f52a","input":"","pos":33,"type":"cell"}
{"id":"f1b333","input":"","pos":31,"type":"cell"}
{"id":0,"time":1658522388444,"type":"user"}
{"last_load":1658522549087,"type":"file"}